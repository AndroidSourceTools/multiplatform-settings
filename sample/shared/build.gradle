/*
 * Copyright 2018 Russell Wolf
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'

kotlin {
    android {
        compilations.all {
            tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) { task ->
                kotlinOptions {
                    freeCompilerArgs = ['-Xuse-experimental=kotlin.Experimental']
                }
            }
        }
    }

    def iosTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
    targetFromPreset(iosTarget, "ios") {
        binaries {
            framework("Shared")
        }
    }
    
    targets.all { target ->
        if (target.name == 'android') return // Android handles this differently
        compilations.all { compilation ->
            tasks[compileKotlinTaskName].kotlinOptions {
                freeCompilerArgs = ['-Xuse-experimental=kotlin.Experimental']
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "com.russhwolf:multiplatform-settings:$library_version"
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            }
        }
        commonTest {
            dependencies {
                // Android needs to see this dependency in test sources as workaround for https://youtrack.jetbrains.com/issue/KT-29343
                implementation "com.russhwolf:multiplatform-settings:$library_version"
                
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            }
        }

        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            }
        }
        androidTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            }
        }

        iosMain {
            dependencies {
            }
        }
        iosTest {
            dependencies {
            }
        }
    }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 15
    }
    buildTypes {
        debug {
            // MPP libraries don't currently get this resolution automatically
            matchingFallbacks = ['release']
        }
    }
}

task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def framework = kotlin.targets.ios.compilations.main.target.binaries.findFramework("Shared", buildType)
    dependsOn framework.linkTask

    doLast {
        def srcFile = framework.outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'Shared.framework/**'
            include 'Shared.framework.dSYM'
        }
    }
}

task iosTest(dependsOn: 'linkTestDebugExecutableIos') {
    doLast {
        def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', "iPhone XR", binary.absolutePath
        }
    }
}
tasks.check.dependsOn iosTest

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}
